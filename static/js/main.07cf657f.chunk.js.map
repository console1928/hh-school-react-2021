{"version":3,"sources":["components/shared/CustomButton/index.jsx","components/shared/CustomInput/index.jsx","components/InputModalWindow/index.jsx","components/Constants.js","components/BlackList/index.jsx","components/UserCard/index.jsx","api/ApiConstants.js","api/index.js","components/Settings/index.jsx","App.js","index.js"],"names":["CustomButton","props","className","buttonstyle","buttontype","CustomInput","Fragment","errormessage","ModalWindow","useState","inputValue","setInputValue","contentRef","useRef","onCloseModal","useCallback","event","clearErrorMessage","closeModal","useEffect","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","ref","onClick","type","placeholder","inputPlaceholder","value","onChange","errorMessage","preventDefault","useModalValue","submitButtonName","Constants","GITHUB_BASE_URL","BlackList","JSON","parse","localStorage","getItem","blackList","setBlackList","blackListIsVisible","setBlackListVisibility","blackListModalIsVisible","setBlackListModalVisibility","blackListModalError","setBlackListModalError","setBlackListValue","operationType","indexOf","updatedBlackList","filter","blackListItem","setItem","stringify","toggleBlackListModalVisibility","length","updatedBlackListVisibility","map","href","InputModalWindow","UserCard","login","style","backgroundImage","image","caption","ApiConstants","API_BASE_URL","Api","getUserData","userName","fetch","getRepositoryContributors","repositoryLink","repositoryNameParts","split","getInitialStringValue","key","getInitialBooleanValue","getInitialUserItemValue","user","Settings","settingsAreVisible","toggleSettingsVisibility","gitHubLogin","setGitHubLogin","gitHubRepository","setGitHubRepository","reviewee","setReviewee","reviewer","setReviewer","loginError","setLoginError","repositoryError","setRepositoryError","requestError","setRequestError","requestIsInProcess","setRequestState","userHasContributions","setUserHasContributions","apiRateLimitError","setValue","valueName","set","clearResult","apiRateLimitExceeded","response","data","status","message","processContributorsResponse","json","then","responseJson","filteredResponse","contributor","contributors","setUserContributions","responseRandomReviewer","Math","floor","random","avatar_url","newValue","onSubmit","Promise","all","currentUser","catch","finally","disabled","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.07cf657f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst CustomButton = (props) => (\r\n    <button {...props} className={`custom-button--${props.buttonstyle}--${props.buttontype}`} />\r\n);\r\n\r\nexport default CustomButton;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst CustomInput = (props) => (\r\n    <React.Fragment>\r\n        <input {...props} className={`custom-input${props.errormessage ? \"--error\" : \"\"}`} />\r\n        {props.errormessage && <div className={\"custom-input__error-message\"}>{props.errormessage}</div>}\r\n    </React.Fragment>\r\n);\r\n\r\nexport default CustomInput;\r\n","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport CustomButton from \"../shared/CustomButton\";\r\nimport CustomInput from \"../shared/CustomInput\";\r\nimport \"./styles.css\";\r\n\r\nconst ModalWindow = (props) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const contentRef = useRef(null);\r\n\r\n    const onCloseModal = useCallback((event) => {\r\n        props.clearErrorMessage();\r\n        props.closeModal(event);\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (event) => {\r\n            if (contentRef.current && !contentRef.current.contains(event.target)) {\r\n                onCloseModal(event);\r\n            }\r\n        }\r\n\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [props, contentRef, onCloseModal]);\r\n\r\n    const onSubmitButtonClick = event => {\r\n        event.preventDefault();\r\n        props.useModalValue(inputValue);\r\n    };\r\n\r\n    const onInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n        if (props.errorMessage) {\r\n            props.clearErrorMessage();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={\"input-modal-window\"}>\r\n            <div className={\"input-modal-window__content\"} ref={contentRef}>\r\n                <button className={\"input-modal-window__close-button\"} onClick={onCloseModal}>❌</button>\r\n                <CustomInput\r\n                    className={\"input-modal-window__text-input\"}\r\n                    type=\"text\"\r\n                    placeholder={props.inputPlaceholder}\r\n                    value={inputValue}\r\n                    onChange={onInputChange}\r\n                    errormessage={props.errorMessage}\r\n                />\r\n                <CustomButton\r\n                    className={\"input-modal-window__add-button\"}\r\n                    onClick={onSubmitButtonClick}\r\n                    buttonstyle={\"outlined\"}\r\n                    buttontype={\"default\"}\r\n                >\r\n                    {props.submitButtonName}\r\n                </CustomButton>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalWindow;\r\n","const Constants = {\r\n    GITHUB_BASE_URL: \"https://github.com\",\r\n};\r\n\r\nexport default Constants;\r\n","import React, { useState } from \"react\";\r\nimport InputModalWindow from \"../InputModalWindow\";\r\nimport CustomButton from \"../shared/CustomButton\";\r\nimport Constants from \"../Constants\";\r\nimport \"./styles.css\";\r\n\r\nconst getInitialBlackListValue = () => JSON.parse(localStorage.getItem(\"blackList\")) || [];\r\nconst getInitialBlackListVisibilityValue = () => JSON.parse(localStorage.getItem(\"blackListIsVisible\")) || false;\r\n\r\nconst BlackList = () => {\r\n    const [blackList, setBlackList] = useState(getInitialBlackListValue());\r\n    const [blackListIsVisible, setBlackListVisibility] = useState(getInitialBlackListVisibilityValue());\r\n    const [blackListModalIsVisible, setBlackListModalVisibility] = useState(false);\r\n    const [blackListModalError, setBlackListModalError] = useState(\"\");\r\n\r\n    const setBlackListValue = (value, operationType) => {\r\n        if (value === \"\") {\r\n            setBlackListModalError(\"Username can not be empty\");\r\n            return;\r\n        }\r\n        if (operationType === \"add\" && blackList.indexOf(value) !== -1) {\r\n            setBlackListModalError(\"User is already in blacklist\");\r\n            return;\r\n        }\r\n        const updatedBlackList = operationType === \"remove\"\r\n            ? blackList.filter(blackListItem => blackListItem !== value)\r\n            : [...blackList, value];\r\n\r\n        localStorage.setItem(\"blackList\", JSON.stringify(updatedBlackList));\r\n        setBlackList(updatedBlackList);\r\n    };\r\n\r\n    const toggleBlackListVisibility = () => {\r\n        const updatedBlackListVisibility = !blackListIsVisible;\r\n\r\n        localStorage.setItem(\"blackListIsVisible\", JSON.stringify(updatedBlackListVisibility));\r\n        setBlackListVisibility(updatedBlackListVisibility);\r\n    };\r\n\r\n    const toggleBlackListModalVisibility = event => {\r\n        event.preventDefault();\r\n        setBlackListModalVisibility(!blackListModalIsVisible);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={\"black-list__caption\"}>\r\n                {blackList.length\r\n                    ? (\r\n                        <div className={\"black-list__users-button\"} onClick={toggleBlackListVisibility}>\r\n                            {\"Blacklisted reviewers\"}\r\n                            <div className={`black-list__${blackListIsVisible ? \"hide\" : \"show\"}-users-arrow`} />\r\n                        </div>\r\n                    ) : \"Blacklist is empty\"}\r\n            </div>\r\n            {blackListIsVisible && blackList.map(blackListItem => (\r\n                <div className={\"black-list__item\"} key={blackListItem}>\r\n                    <a className={\"black-list__item-name\"} href={`${Constants.GITHUB_BASE_URL}/${blackListItem}`}>\r\n                        {blackListItem}\r\n                    </a>\r\n                    <button\r\n                        className={\"black-list__item-button\"}\r\n                        onClick={() => setBlackListValue(blackListItem, \"remove\")}\r\n                    >\r\n                        ❌\r\n                    </button>\r\n                </div>\r\n            ))}\r\n            <CustomButton onClick={toggleBlackListModalVisibility} buttonstyle={\"outlined\"} buttontype={\"default\"}>\r\n                Add GitHub users to blacklist\r\n            </CustomButton>\r\n            {blackListModalIsVisible && (\r\n                <InputModalWindow\r\n                    closeModal={toggleBlackListModalVisibility}\r\n                    useModalValue={value => setBlackListValue(value, \"add\")}\r\n                    inputPlaceholder={\"GitHub login\"}\r\n                    submitButtonName={\"Add user to reviewers blacklist\"}\r\n                    errorMessage={blackListModalError}\r\n                    clearErrorMessage={() => setBlackListModalError(\"\")}\r\n                />\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default BlackList;\r\n","import React from \"react\";\r\nimport Constants from \"../Constants\";\r\nimport \"./styles.css\";\r\n\r\nconst UserCard = (props) => {\r\n    return (\r\n        <a className={\"user-card\"} href={`${Constants.GITHUB_BASE_URL}/${props.login}`}>\r\n            <div className={\"user-card__image\"} style={{ backgroundImage: `url(${props.image}` }} />\r\n            <div className={\"user-card__upper-caption\"}>{props.login}</div>\r\n            <div>{`(${props.caption})`}</div>\r\n        </a>\r\n\r\n    );\r\n};\r\n\r\nexport default UserCard;\r\n","const ApiConstants = {\r\n    API_BASE_URL: \"https://api.github.com\",\r\n};\r\n\r\nexport default ApiConstants;\r\n","import ApiConstants from './ApiConstants';\r\nimport Constants from \"../components/Constants\";\r\n\r\nconst Api = {\r\n    async getUserData(userName) {\r\n        return await fetch(`${ApiConstants.API_BASE_URL}/users/${userName}`)\r\n    },\r\n    async getRepositoryContributors(repositoryLink) {\r\n        const repositoryNameParts = repositoryLink.split(`${Constants.GITHUB_BASE_URL}/`);\r\n\r\n        return await fetch(`${ApiConstants.API_BASE_URL}/repos/${repositoryNameParts[1]}/contributors`);\r\n    }\r\n}\r\n\r\nexport default Api;\r\n","import React, { useState } from \"react\";\r\nimport BlackList from \"../BlackList\";\r\nimport UserCard from \"../UserCard\";\r\nimport Api from \"../../api/index.js\";\r\nimport CustomButton from \"../shared/CustomButton\";\r\nimport CustomInput from \"../shared/CustomInput\";\r\nimport \"./styles.css\";\r\n\r\nconst getInitialStringValue = (key) => (localStorage.getItem(key) || \"\");\r\nconst getInitialBooleanValue = (key) => (localStorage.getItem(key) === \"true\" || false);\r\nconst getInitialUserItemValue = (user) => (JSON.parse(localStorage.getItem(user)) || { image: \"\", login: \"\" });\r\n\r\nconst Settings = () => {\r\n    const [settingsAreVisible, toggleSettingsVisibility] = useState(getInitialBooleanValue(\"settingsAreVisible\"));\r\n    const [gitHubLogin, setGitHubLogin] = useState(getInitialStringValue(\"gitHubLogin\"));\r\n    const [gitHubRepository, setGitHubRepository] = useState(getInitialStringValue(\"gitHubRepository\"));\r\n    const [reviewee, setReviewee] = useState(getInitialUserItemValue(\"reviewee\"));\r\n    const [reviewer, setReviewer] = useState(getInitialUserItemValue(\"reviewer\"));\r\n    const [loginError, setLoginError] = useState(\"\");\r\n    const [repositoryError, setRepositoryError] = useState(\"\");\r\n    const [requestError, setRequestError] = useState(\"\");\r\n    const [requestIsInProcess, setRequestState] = useState(false);\r\n    const [userHasContributions, setUserHasContributions] = useState(getInitialBooleanValue(\"userHasContributions\"));\r\n\r\n    const apiRateLimitError = \"API rate limit exceeded\";\r\n\r\n    const toggleSettingsVisibilityValue = () => {\r\n        const newValue = !settingsAreVisible;\r\n\r\n        localStorage.setItem(\"settingsAreVisible\", newValue);\r\n        toggleSettingsVisibility(newValue);\r\n    };\r\n\r\n    const setValue = (value, valueName, set) => {\r\n        localStorage.setItem(\r\n            valueName,\r\n            typeof value === \"string\" ? value : JSON.stringify(value)\r\n        );\r\n        set(value);\r\n    };\r\n\r\n    const clearErrorMessages = () => {\r\n        setLoginError(\"\");\r\n        setRepositoryError(\"\");\r\n        setRequestError(\"\");\r\n    };\r\n\r\n    const formHasNoErrorMessages = () => (\r\n        !loginError.length && !repositoryError.length && !requestError.length\r\n    );\r\n\r\n    const clearResult = () => {\r\n        setValue({ image: \"\", login: \"\" }, \"reviewee\", setReviewee);\r\n        setValue({ image: \"\", login: \"\" }, \"reviewer\", setReviewer);\r\n    };\r\n\r\n    const apiRateLimitExceeded = (response, data) => (\r\n        response.status === 403 &&\r\n        data.message &&\r\n        data.message.indexOf(apiRateLimitError) > -1\r\n    );\r\n\r\n    const processUserDataResponse = (response) => (\r\n        response.json().then((responseJson) => {\r\n            if (response.status >= 200 && response.status < 300) {\r\n                setValue({ image: responseJson.avatar_url, login: responseJson.login }, \"reviewee\", setReviewee);\r\n            } else if (apiRateLimitExceeded(response, responseJson)) {\r\n                setLoginError(apiRateLimitError);\r\n            } else {\r\n                setLoginError('Print login, for example \"console1928\"');\r\n            }\r\n        })\r\n    );\r\n\r\n    const setUserContributions = (contributors) => {\r\n        setValue(false, \"userHasContributions\", setUserHasContributions);\r\n\r\n        for (const contributor of contributors) {\r\n            if (contributor.login === gitHubLogin) {\r\n                setValue(true, \"userHasContributions\", setUserHasContributions);\r\n            }\r\n        }\r\n    };\r\n\r\n    const processContributorsResponse = (response) => (\r\n        response.json().then((responseJson) => {\r\n            if (response.status >= 200 && response.status < 300) {\r\n                const blackList = JSON.parse(localStorage.getItem(\"blackList\")) || [];\r\n                const filteredResponse = responseJson.filter(\r\n                    contributor => (\r\n                        contributor.login !== gitHubLogin &&\r\n                        blackList.indexOf(contributor.login) === -1\r\n                    )\r\n                );\r\n\r\n                setUserContributions(responseJson);\r\n\r\n                if (filteredResponse.length) {\r\n                    const responseRandomReviewer =\r\n                        filteredResponse[Math.floor(Math.random() * filteredResponse.length)];\r\n\r\n                    setValue(\r\n                        { image: responseRandomReviewer.avatar_url, login: responseRandomReviewer.login },\r\n                        \"reviewer\",\r\n                        setReviewer\r\n                    );\r\n                }\r\n            } else if (apiRateLimitExceeded(response, responseJson)) {\r\n                setRepositoryError(apiRateLimitError);\r\n            } else {\r\n                setRepositoryError('Print repository address, for example \"https://github.com/console1928/example\"');\r\n            }\r\n        })\r\n    );\r\n\r\n    const generateReviewer = (event) => {\r\n        event.preventDefault();\r\n        clearErrorMessages();\r\n        clearResult();\r\n        if (gitHubLogin === \"\") {\r\n            setLoginError(\"This field should not be empty\");\r\n            return;\r\n        }\r\n        if (gitHubRepository === \"\") {\r\n            setRepositoryError(\"This field should not be empty\");\r\n            return;\r\n        }\r\n        setRequestState(true);\r\n        Promise.all([\r\n            Api.getUserData(gitHubLogin),\r\n            Api.getRepositoryContributors(gitHubRepository)\r\n        ])\r\n            .then(([currentUser, contributors]) => {\r\n                processUserDataResponse(currentUser)\r\n                    .then(() => processContributorsResponse(contributors))\r\n                    .then();\r\n            })\r\n            .catch(() => {\r\n                setRequestError(\"An error occured, check your internet connection\");\r\n            })\r\n            .finally(() => {\r\n                setRequestState(false);\r\n            });\r\n    };\r\n\r\n    const renderUserHasNoContributions = () => (\r\n        <div className={\"settings__no-contributions\"}>\r\n            Current user has no contributions to this repository.\r\n            Try changing GitHub login or GitHub repository.\r\n        </div>\r\n    );\r\n\r\n    const renderUserHasContributions = () => (\r\n        <React.Fragment>\r\n            {reviewee.login && (\r\n                <UserCard\r\n                    login={reviewee.login}\r\n                    image={reviewee.image}\r\n                    caption={\"Reviewee\"}\r\n                />\r\n            )}\r\n            {reviewer.login ? (\r\n                <UserCard\r\n                    login={reviewer.login}\r\n                    image={reviewer.image}\r\n                    caption={\"Reviewer\"}\r\n                />\r\n            ) : (\r\n                    <div className={\"settings__no-reviewer\"}>No reviewer available</div>\r\n                )}\r\n        </React.Fragment>\r\n    );\r\n\r\n    const renderResult = () => {\r\n        return (\r\n            <div className={\"settings__result\"}>\r\n                {userHasContributions ? renderUserHasContributions() : renderUserHasNoContributions()}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={\"settings\"}>\r\n            <CustomButton onClick={toggleSettingsVisibilityValue} buttonstyle={\"outlined\"} buttontype={\"default\"}>\r\n                Settings\r\n            </CustomButton>\r\n            {settingsAreVisible && (\r\n                <div className={\"settings__content\"}>\r\n                    <form className={\"settings__form\"} onSubmit={generateReviewer}>\r\n                        <CustomInput\r\n                            type=\"text\"\r\n                            placeholder=\"GitHub login\"\r\n                            value={gitHubLogin}\r\n                            onChange={event => setValue(event.target.value, \"gitHubLogin\", setGitHubLogin)}\r\n                            errormessage={loginError}\r\n                            disabled={requestIsInProcess}\r\n                        />\r\n                        <CustomInput\r\n                            type=\"text\"\r\n                            placeholder=\"GitHub repository\"\r\n                            value={gitHubRepository}\r\n                            onChange={event => setValue(event.target.value, \"gitHubRepository\", setGitHubRepository)}\r\n                            errormessage={repositoryError}\r\n                            disabled={requestIsInProcess}\r\n                        />\r\n                        <BlackList />\r\n                        <CustomButton\r\n                            type={\"submit\"}\r\n                            buttonstyle={\"filled\"}\r\n                            buttontype={\"default\"}\r\n                            disabled={requestIsInProcess}\r\n                        >\r\n                            Generate reviewer\r\n                        </CustomButton>\r\n                        <div className={\"settings__request-error\"}>{requestError}</div>\r\n                    </form>\r\n                    {reviewee.login && formHasNoErrorMessages() && (\r\n                        <React.Fragment>\r\n                            {renderResult()}\r\n                            <CustomButton onClick={clearResult} buttonstyle={\"filled\"} buttontype={\"danger\"}>\r\n                                Clear Result\r\n                            </CustomButton>\r\n                        </React.Fragment>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport Settings from \"./components/Settings\";\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Settings />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}